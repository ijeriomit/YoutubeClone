{"ast":null,"code":"import _classPrivateFieldInitSpec from \"/Users/ijeriomitogun/Projects/TypescriptProjects/interview-web-client/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _classPrivateFieldGet from \"/Users/ijeriomitogun/Projects/TypescriptProjects/interview-web-client/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet2.js\";\nimport _classPrivateFieldSet from \"/Users/ijeriomitogun/Projects/TypescriptProjects/interview-web-client/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet2.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\n// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport { query, collection, getFirestore, getDocs, where, addDoc } from \"firebase/firestore\";\nvar _firebaseConfig = /*#__PURE__*/new WeakMap();\nvar _firebaseApp = /*#__PURE__*/new WeakMap();\nvar _firebaseDataBase = /*#__PURE__*/new WeakMap();\nvar _collections = /*#__PURE__*/new WeakMap();\nexport default class FireStoreService {\n  constructor(apiKey = \"\", appId = \"\", projectId = \"\") {\n    _classPrivateFieldInitSpec(this, _firebaseConfig, {\n      apiKey: \"AIzaSyBO-d7GVIbi1T6d-sWiKNs3Z4L7V-AgHJI\",\n      authDomain: \"upstartinterviewdatabase.firebaseapp.com\",\n      projectId: \"upstartinterviewdatabase\",\n      storageBucket: \"upstartinterviewdatabase.firebasestorage.app\",\n      messagingSenderId: \"60058567450\",\n      appId: \"1:60058567450:web:6c73dcb96fe5f21048a2a3\",\n      measurementId: \"G-S6GSY8P1QD\"\n    });\n    _classPrivateFieldInitSpec(this, _firebaseApp, null);\n    _classPrivateFieldInitSpec(this, _firebaseDataBase, null);\n    _classPrivateFieldInitSpec(this, _collections, new Map());\n    _classPrivateFieldSet(_firebaseConfig, this, {\n      apiKey,\n      appId,\n      projectId,\n      ..._classPrivateFieldGet(_firebaseConfig, this)\n    });\n    _classPrivateFieldSet(_firebaseApp, this, initializeApp(_classPrivateFieldGet(_firebaseConfig, this)));\n    _classPrivateFieldSet(_firebaseDataBase, this, getFirestore(_classPrivateFieldGet(_firebaseApp, this)));\n    console.log(\"Init Filestore\");\n  }\n  async fetchCollectionData(collectionName) {\n    let collectionData = null;\n    this.updateCollectionMap(collectionName);\n    try {\n      collectionData = await getDocs(_classPrivateFieldGet(_collections, this).get(collectionName)\n      // collection(this.#firebaseDataBase, collectionName)\n      );\n    } catch (e) {\n      console.error(\"Error Fetching Collection Data\", e);\n    }\n    return collectionData;\n  }\n  updateCollectionMap(collectionName) {\n    if (!_classPrivateFieldGet(_collections, this).has(collectionName)) {\n      _classPrivateFieldGet(_collections, this).set(collectionName, collection(_classPrivateFieldGet(_firebaseDataBase, this), collectionName));\n    }\n  }\n  async addDataToCollection(collectionName, data) {\n    this.updateCollectionMap(collectionName);\n    const collectionRef = _classPrivateFieldGet(_collections, this).get(collectionName);\n    try {\n      await addDoc(collectionRef, {\n        ...data\n      });\n      console.log(\"Added doc\");\n    } catch (e) {\n      console.error(`Error Adding Data to Collection: ${collectionRef.id}`, e);\n    }\n  }\n  async queryCollection(collectionName, queryParams) {\n    const queryData = [];\n    this.updateCollectionMap(collectionName);\n    console.log(queryParams);\n    const queryRef = query(_classPrivateFieldGet(_collections, this).get(collectionName), where(\"timesClicked\", \"<\", parseInt(\"4\")));\n    try {\n      const docs = await getDocs(queryRef);\n      docs.forEach(doc => {\n        console.log(doc.id, \"->\", doc.data());\n        queryData.push(doc.data());\n      });\n    } catch (e) {\n      console.error(`Error querying collection ${collectionName}`, e);\n    }\n    return queryData;\n  }\n}","map":{"version":3,"names":["initializeApp","query","collection","getFirestore","getDocs","where","addDoc","_firebaseConfig","WeakMap","_firebaseApp","_firebaseDataBase","_collections","FireStoreService","constructor","apiKey","appId","projectId","_classPrivateFieldInitSpec","authDomain","storageBucket","messagingSenderId","measurementId","Map","_classPrivateFieldSet","_classPrivateFieldGet","console","log","fetchCollectionData","collectionName","collectionData","updateCollectionMap","get","e","error","has","set","addDataToCollection","data","collectionRef","id","queryCollection","queryParams","queryData","queryRef","parseInt","docs","forEach","doc","push"],"sources":["/Users/ijeriomitogun/Projects/TypescriptProjects/interview-web-client/src/utils/firestore-service.js"],"sourcesContent":["// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport {\n  query,\n  collection,\n  getFirestore,\n  getDocs,\n  where,\n  addDoc,\n} from \"firebase/firestore\";\n\nexport default class FireStoreService {\n  #firebaseConfig = {\n    apiKey: \"AIzaSyBO-d7GVIbi1T6d-sWiKNs3Z4L7V-AgHJI\",\n    authDomain: \"upstartinterviewdatabase.firebaseapp.com\",\n    projectId: \"upstartinterviewdatabase\",\n    storageBucket: \"upstartinterviewdatabase.firebasestorage.app\",\n    messagingSenderId: \"60058567450\",\n    appId: \"1:60058567450:web:6c73dcb96fe5f21048a2a3\",\n    measurementId: \"G-S6GSY8P1QD\",\n  };\n  #firebaseApp = null;\n  #firebaseDataBase = null;\n  #collections = new Map();\n\n  constructor(apiKey = \"\", appId = \"\", projectId = \"\") {\n    this.#firebaseConfig = {\n      apiKey,\n      appId,\n      projectId,\n      ...this.#firebaseConfig,\n    };\n    this.#firebaseApp = initializeApp(this.#firebaseConfig);\n    this.#firebaseDataBase = getFirestore(this.#firebaseApp);\n    console.log(\"Init Filestore\");\n  }\n\n  async fetchCollectionData(collectionName) {\n    let collectionData = null;\n    this.updateCollectionMap(collectionName);\n    try {\n      collectionData = await getDocs(\n        this.#collections.get(collectionName)\n        // collection(this.#firebaseDataBase, collectionName)\n      );\n    } catch (e) {\n      console.error(\"Error Fetching Collection Data\", e);\n    }\n    return collectionData;\n  }\n\n  updateCollectionMap(collectionName) {\n    if (!this.#collections.has(collectionName)) {\n      this.#collections.set(\n        collectionName,\n        collection(this.#firebaseDataBase, collectionName)\n      );\n    }\n  }\n\n  async addDataToCollection(collectionName, data) {\n    this.updateCollectionMap(collectionName);\n    const collectionRef = this.#collections.get(collectionName);\n    try {\n      await addDoc(collectionRef, { ...data });\n      console.log(\"Added doc\");\n    } catch (e) {\n      console.error(`Error Adding Data to Collection: ${collectionRef.id}`, e);\n    }\n  }\n\n  async queryCollection(collectionName, queryParams) {\n    const queryData = [];\n    this.updateCollectionMap(collectionName);\n    console.log(queryParams);\n    const queryRef = query(\n      this.#collections.get(collectionName),\n      where(\"timesClicked\", \"<\", parseInt(\"4\"))\n    );\n    try {\n      const docs = await getDocs(queryRef);\n      docs.forEach((doc) => {\n        console.log(doc.id, \"->\", doc.data());\n        queryData.push(doc.data());\n      });\n    } catch (e) {\n      console.error(`Error querying collection ${collectionName}`, e);\n    }\n    return queryData;\n  }\n}\n"],"mappings":";;;;;;AAAA;AACA,SAASA,aAAa,QAAQ,cAAc;AAC5C,SACEC,KAAK,EACLC,UAAU,EACVC,YAAY,EACZC,OAAO,EACPC,KAAK,EACLC,MAAM,QACD,oBAAoB;AAAC,IAAAC,eAAA,oBAAAC,OAAA;AAAA,IAAAC,YAAA,oBAAAD,OAAA;AAAA,IAAAE,iBAAA,oBAAAF,OAAA;AAAA,IAAAG,YAAA,oBAAAH,OAAA;AAE5B,eAAe,MAAMI,gBAAgB,CAAC;EAcpCC,WAAWA,CAACC,MAAM,GAAG,EAAE,EAAEC,KAAK,GAAG,EAAE,EAAEC,SAAS,GAAG,EAAE,EAAE;IAbrDC,0BAAA,OAAAV,eAAe,EAAG;MAChBO,MAAM,EAAE,yCAAyC;MACjDI,UAAU,EAAE,0CAA0C;MACtDF,SAAS,EAAE,0BAA0B;MACrCG,aAAa,EAAE,8CAA8C;MAC7DC,iBAAiB,EAAE,aAAa;MAChCL,KAAK,EAAE,0CAA0C;MACjDM,aAAa,EAAE;IACjB,CAAC;IACDJ,0BAAA,OAAAR,YAAY,EAAG,IAAI;IACnBQ,0BAAA,OAAAP,iBAAiB,EAAG,IAAI;IACxBO,0BAAA,OAAAN,YAAY,EAAG,IAAIW,GAAG,CAAC,CAAC;IAGtBC,qBAAA,CAAKhB,eAAe,EAApB,IAAI,EAAmB;MACrBO,MAAM;MACNC,KAAK;MACLC,SAAS;MACT,GAAGQ,qBAAA,CAAKjB,eAAe,EAApB,IAAmB;IACxB,CALmB,CAAC;IAMpBgB,qBAAA,CAAKd,YAAY,EAAjB,IAAI,EAAgBT,aAAa,CAACwB,qBAAA,CAAKjB,eAAe,EAApB,IAAmB,CAAC,CAAtC,CAAC;IACjBgB,qBAAA,CAAKb,iBAAiB,EAAtB,IAAI,EAAqBP,YAAY,CAACqB,qBAAA,CAAKf,YAAY,EAAjB,IAAgB,CAAC,CAAlC,CAAC;IACtBgB,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;EAC/B;EAEA,MAAMC,mBAAmBA,CAACC,cAAc,EAAE;IACxC,IAAIC,cAAc,GAAG,IAAI;IACzB,IAAI,CAACC,mBAAmB,CAACF,cAAc,CAAC;IACxC,IAAI;MACFC,cAAc,GAAG,MAAMzB,OAAO,CAC5BoB,qBAAA,CAAKb,YAAY,EAAjB,IAAgB,CAAC,CAACoB,GAAG,CAACH,cAAc;MACpC;MACF,CAAC;IACH,CAAC,CAAC,OAAOI,CAAC,EAAE;MACVP,OAAO,CAACQ,KAAK,CAAC,gCAAgC,EAAED,CAAC,CAAC;IACpD;IACA,OAAOH,cAAc;EACvB;EAEAC,mBAAmBA,CAACF,cAAc,EAAE;IAClC,IAAI,CAACJ,qBAAA,CAAKb,YAAY,EAAjB,IAAgB,CAAC,CAACuB,GAAG,CAACN,cAAc,CAAC,EAAE;MAC1CJ,qBAAA,CAAKb,YAAY,EAAjB,IAAgB,CAAC,CAACwB,GAAG,CACnBP,cAAc,EACd1B,UAAU,CAACsB,qBAAA,CAAKd,iBAAiB,EAAtB,IAAqB,CAAC,EAAEkB,cAAc,CACnD,CAAC;IACH;EACF;EAEA,MAAMQ,mBAAmBA,CAACR,cAAc,EAAES,IAAI,EAAE;IAC9C,IAAI,CAACP,mBAAmB,CAACF,cAAc,CAAC;IACxC,MAAMU,aAAa,GAAGd,qBAAA,CAAKb,YAAY,EAAjB,IAAgB,CAAC,CAACoB,GAAG,CAACH,cAAc,CAAC;IAC3D,IAAI;MACF,MAAMtB,MAAM,CAACgC,aAAa,EAAE;QAAE,GAAGD;MAAK,CAAC,CAAC;MACxCZ,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;IAC1B,CAAC,CAAC,OAAOM,CAAC,EAAE;MACVP,OAAO,CAACQ,KAAK,CAAC,oCAAoCK,aAAa,CAACC,EAAE,EAAE,EAAEP,CAAC,CAAC;IAC1E;EACF;EAEA,MAAMQ,eAAeA,CAACZ,cAAc,EAAEa,WAAW,EAAE;IACjD,MAAMC,SAAS,GAAG,EAAE;IACpB,IAAI,CAACZ,mBAAmB,CAACF,cAAc,CAAC;IACxCH,OAAO,CAACC,GAAG,CAACe,WAAW,CAAC;IACxB,MAAME,QAAQ,GAAG1C,KAAK,CACpBuB,qBAAA,CAAKb,YAAY,EAAjB,IAAgB,CAAC,CAACoB,GAAG,CAACH,cAAc,CAAC,EACrCvB,KAAK,CAAC,cAAc,EAAE,GAAG,EAAEuC,QAAQ,CAAC,GAAG,CAAC,CAC1C,CAAC;IACD,IAAI;MACF,MAAMC,IAAI,GAAG,MAAMzC,OAAO,CAACuC,QAAQ,CAAC;MACpCE,IAAI,CAACC,OAAO,CAAEC,GAAG,IAAK;QACpBtB,OAAO,CAACC,GAAG,CAACqB,GAAG,CAACR,EAAE,EAAE,IAAI,EAAEQ,GAAG,CAACV,IAAI,CAAC,CAAC,CAAC;QACrCK,SAAS,CAACM,IAAI,CAACD,GAAG,CAACV,IAAI,CAAC,CAAC,CAAC;MAC5B,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOL,CAAC,EAAE;MACVP,OAAO,CAACQ,KAAK,CAAC,6BAA6BL,cAAc,EAAE,EAAEI,CAAC,CAAC;IACjE;IACA,OAAOU,SAAS;EAClB;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}